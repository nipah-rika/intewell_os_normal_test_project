; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27049.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	shm_write
PUBLIC	main
EXTRN	memcpy:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	open_shared_memory:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$shm_write DD imagerel $LN12
	DD	imagerel $LN12+272
	DD	imagerel $unwind$shm_write
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG46826 DB	'shm_w', 00H
	ORG $+2
$SG46827 DB	'shm_r', 00H
	ORG $+2
$SG46830 DB	'shm_w open failed!!!', 0dH, 0aH, 00H
	ORG $+1
$SG46831 DB	'shm_w open success!!!', 0dH, 0aH, 00H
$SG46832 DB	'shm_w_ptr: %p', 0aH, 00H
	ORG $+1
$SG46835 DB	'shm_r open failed!!!', 0dH, 0aH, 00H
	ORG $+1
$SG46836 DB	'shm_r open success!!!', 0dH, 0aH, 00H
$SG46837 DB	'shm_r_ptr: %p', 0aH, 00H
	ORG $+1
$SG46839 DB	'Test Failed!!!', 0dH, 0aH, 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$shm_write DD 010401H
	DD	08204H
$unwind$main DD	010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File h:\shmm\intewellrtre_windows-testshmm(1)\intewellrtre_windows-testshmm\gpos\src\exe\testshmm\shm_read.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
main	PROC

; 71   : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H

; 72   : 	UNREFERENCED_PARAMETER(argc);
; 73   : 	UNREFERENCED_PARAMETER(argv);
; 74   : 
; 75   : 	shm_write();

	call	shm_write

; 76   : }

	xor	eax, eax
	add	rsp, 40					; 00000028H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File h:\shmm\intewellrtre_windows-testshmm(1)\intewellrtre_windows-testshmm\gpos\src\exe\testshmm\shm_read.c
_TEXT	SEGMENT
shm_size_w$ = 32
shm_size_r$ = 36
shm_w_ptr$ = 40
shm_r_ptr$ = 48
shm_write PROC

; 20   : {

$LN12:
	sub	rsp, 72					; 00000048H

; 21   : 	uint32_t shm_size_w = 0;

	mov	DWORD PTR shm_size_w$[rsp], 0

; 22   : 	uint32_t shm_size_r = 0;

	mov	DWORD PTR shm_size_r$[rsp], 0

; 23   : 	unsigned char *shm_w_ptr = (unsigned char *)open_shared_memory("shm_w", INFINITE, &shm_size_w);

	lea	r8, QWORD PTR shm_size_w$[rsp]
	mov	edx, -1
	lea	rcx, OFFSET FLAT:$SG46826
	call	open_shared_memory
	mov	QWORD PTR shm_w_ptr$[rsp], rax

; 24   : 	unsigned char *shm_r_ptr = (unsigned char *)open_shared_memory("shm_r", INFINITE, &shm_size_r);

	lea	r8, QWORD PTR shm_size_r$[rsp]
	mov	edx, -1
	lea	rcx, OFFSET FLAT:$SG46827
	call	open_shared_memory
	mov	QWORD PTR shm_r_ptr$[rsp], rax

; 25   : 
; 26   : 	if (NULL == shm_w_ptr) {

	cmp	QWORD PTR shm_w_ptr$[rsp], 0
	jne	SHORT $LN6@shm_write

; 27   : 
; 28   : 		printf("shm_w open failed!!!\r\n");

	lea	rcx, OFFSET FLAT:$SG46830
	call	printf

; 29   : 		return;

	jmp	$LN1@shm_write

; 30   : 	}

	jmp	SHORT $LN7@shm_write
$LN6@shm_write:

; 31   : 	else {
; 32   : 
; 33   : 		printf("shm_w open success!!!\r\n");

	lea	rcx, OFFSET FLAT:$SG46831
	call	printf

; 34   : 		printf("shm_w_ptr: %p\n", shm_w_ptr);

	mov	rdx, QWORD PTR shm_w_ptr$[rsp]
	lea	rcx, OFFSET FLAT:$SG46832
	call	printf
$LN7@shm_write:

; 35   : 	}
; 36   : 
; 37   : 	if (NULL == shm_r_ptr) {

	cmp	QWORD PTR shm_r_ptr$[rsp], 0
	jne	SHORT $LN8@shm_write

; 38   : 
; 39   : 		printf("shm_r open failed!!!\r\n");

	lea	rcx, OFFSET FLAT:$SG46835
	call	printf

; 40   : 		return;

	jmp	SHORT $LN1@shm_write

; 41   : 	}

	jmp	SHORT $LN9@shm_write
$LN8@shm_write:

; 42   : 	else {
; 43   : 
; 44   : 		printf("shm_r open success!!!\r\n");

	lea	rcx, OFFSET FLAT:$SG46836
	call	printf

; 45   : 		printf("shm_r_ptr: %p\n", shm_r_ptr);

	mov	rdx, QWORD PTR shm_r_ptr$[rsp]
	lea	rcx, OFFSET FLAT:$SG46837
	call	printf
$LN9@shm_write:

; 46   : 	}
; 47   : 
; 48   : 	if (shm_size_w != shm_size_r) {

	mov	eax, DWORD PTR shm_size_r$[rsp]
	cmp	DWORD PTR shm_size_w$[rsp], eax
	je	SHORT $LN10@shm_write

; 49   : 
; 50   : 		printf("Test Failed!!!\r\n");

	lea	rcx, OFFSET FLAT:$SG46839
	call	printf
$LN10@shm_write:
$LN2@shm_write:

; 51   : 	}
; 52   : 
; 53   : 	while (1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN3@shm_write
$LN4@shm_write:

; 54   : 
; 55   : 		while (*shm_w_ptr != SHM_W);

	mov	rax, QWORD PTR shm_w_ptr$[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 2
	je	SHORT $LN5@shm_write
	jmp	SHORT $LN4@shm_write
$LN5@shm_write:

; 56   : 		*shm_w_ptr = SHM_WAIT;

	mov	rax, QWORD PTR shm_w_ptr$[rsp]
	mov	BYTE PTR [rax], 0

; 57   : 
; 58   : 		memcpy(shm_r_ptr, shm_w_ptr, shm_size_w);

	mov	eax, DWORD PTR shm_size_w$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR shm_w_ptr$[rsp]
	mov	rcx, QWORD PTR shm_r_ptr$[rsp]
	call	memcpy

; 59   : 
; 60   : 		*shm_r_ptr = SHM_R;

	mov	rax, QWORD PTR shm_r_ptr$[rsp]
	mov	BYTE PTR [rax], 1

; 61   : 	}

	jmp	SHORT $LN2@shm_write
$LN3@shm_write:
$LN1@shm_write:

; 62   : }

	add	rsp, 72					; 00000048H
	ret	0
shm_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 961  :     }

	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf

; 644  :     }

	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
