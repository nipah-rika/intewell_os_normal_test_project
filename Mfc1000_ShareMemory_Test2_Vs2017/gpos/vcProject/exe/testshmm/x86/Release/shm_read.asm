; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27050.0 

	TITLE	C:\hnc-test\gpos\src\exe\testshmm\shm_read.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_shm_write@0
PUBLIC	_main
EXTRN	_memcpy:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_open_shared_memory@16:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG46941 DB	'shm_w', 00H
	ORG $+2
$SG46942 DB	'shm_r', 00H
	ORG $+2
$SG46945 DB	'shm_w open failed!!!', 0dH, 0aH, 00H
	ORG $+1
$SG46946 DB	'shm_w open success!!!', 0dH, 0aH, 00H
$SG46947 DB	'shm_w_ptr: %p', 0aH, 00H
	ORG $+1
$SG46950 DB	'shm_r open failed!!!', 0dH, 0aH, 00H
	ORG $+1
$SG46951 DB	'shm_r open success!!!', 0dH, 0aH, 00H
$SG46952 DB	'shm_r_ptr: %p', 0aH, 00H
	ORG $+1
$SG46954 DB	'Test Failed!!!', 0dH, 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
; File c:\hnc-test\gpos\src\exe\testshmm\shm_read.c
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC

; 71   : {

	push	ebp
	mov	ebp, esp

; 72   : 	UNREFERENCED_PARAMETER(argc);
; 73   : 	UNREFERENCED_PARAMETER(argv);
; 74   : 
; 75   : 	shm_write();

	call	_shm_write@0

; 76   : }

	xor	eax, eax
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\hnc-test\gpos\src\exe\testshmm\shm_read.c
_TEXT	SEGMENT
_shm_size_r$ = -16					; size = 4
_shm_size_w$ = -12					; size = 4
_shm_r_ptr$ = -8					; size = 4
_shm_w_ptr$ = -4					; size = 4
_shm_write@0 PROC

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 21   : 	uint32_t shm_size_w = 0;

	mov	DWORD PTR _shm_size_w$[ebp], 0

; 22   : 	uint32_t shm_size_r = 0;

	mov	DWORD PTR _shm_size_r$[ebp], 0

; 23   : 	unsigned char *shm_w_ptr = (unsigned char *)open_shared_memory("shm_w", INFINITE, &shm_size_w);

	lea	eax, DWORD PTR _shm_size_w$[ebp]
	push	eax
	push	0
	push	-1
	push	OFFSET $SG46941
	call	_open_shared_memory@16
	mov	DWORD PTR _shm_w_ptr$[ebp], eax

; 24   : 	unsigned char *shm_r_ptr = (unsigned char *)open_shared_memory("shm_r", INFINITE, &shm_size_r);

	lea	ecx, DWORD PTR _shm_size_r$[ebp]
	push	ecx
	push	0
	push	-1
	push	OFFSET $SG46942
	call	_open_shared_memory@16
	mov	DWORD PTR _shm_r_ptr$[ebp], eax

; 25   : 
; 26   : 	if (NULL == shm_w_ptr) {

	cmp	DWORD PTR _shm_w_ptr$[ebp], 0
	jne	SHORT $LN6@shm_write

; 27   : 
; 28   : 		printf("shm_w open failed!!!\r\n");

	push	OFFSET $SG46945
	call	_printf
	add	esp, 4

; 29   : 		return;

	jmp	$LN1@shm_write

; 30   : 	}

	jmp	SHORT $LN7@shm_write
$LN6@shm_write:

; 31   : 	else {
; 32   : 
; 33   : 		printf("shm_w open success!!!\r\n");

	push	OFFSET $SG46946
	call	_printf
	add	esp, 4

; 34   : 		printf("shm_w_ptr: %p\n", shm_w_ptr);

	mov	edx, DWORD PTR _shm_w_ptr$[ebp]
	push	edx
	push	OFFSET $SG46947
	call	_printf
	add	esp, 8
$LN7@shm_write:

; 35   : 	}
; 36   : 
; 37   : 	if (NULL == shm_r_ptr) {

	cmp	DWORD PTR _shm_r_ptr$[ebp], 0
	jne	SHORT $LN8@shm_write

; 38   : 
; 39   : 		printf("shm_r open failed!!!\r\n");

	push	OFFSET $SG46950
	call	_printf
	add	esp, 4

; 40   : 		return;

	jmp	SHORT $LN1@shm_write

; 41   : 	}

	jmp	SHORT $LN9@shm_write
$LN8@shm_write:

; 42   : 	else {
; 43   : 
; 44   : 		printf("shm_r open success!!!\r\n");

	push	OFFSET $SG46951
	call	_printf
	add	esp, 4

; 45   : 		printf("shm_r_ptr: %p\n", shm_r_ptr);

	mov	eax, DWORD PTR _shm_r_ptr$[ebp]
	push	eax
	push	OFFSET $SG46952
	call	_printf
	add	esp, 8
$LN9@shm_write:

; 46   : 	}
; 47   : 
; 48   : 	if (shm_size_w != shm_size_r) {

	mov	ecx, DWORD PTR _shm_size_w$[ebp]
	cmp	ecx, DWORD PTR _shm_size_r$[ebp]
	je	SHORT $LN2@shm_write

; 49   : 
; 50   : 		printf("Test Failed!!!\r\n");

	push	OFFSET $SG46954
	call	_printf
	add	esp, 4
$LN2@shm_write:

; 51   : 	}
; 52   : 
; 53   : 	while (1) {

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN1@shm_write
$LN4@shm_write:

; 54   : 
; 55   : 		while (*shm_w_ptr != SHM_W);

	mov	eax, DWORD PTR _shm_w_ptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 2
	je	SHORT $LN5@shm_write
	jmp	SHORT $LN4@shm_write
$LN5@shm_write:

; 56   : 		*shm_w_ptr = SHM_WAIT;

	mov	edx, DWORD PTR _shm_w_ptr$[ebp]
	mov	BYTE PTR [edx], 0

; 57   : 
; 58   : 		memcpy(shm_r_ptr, shm_w_ptr, shm_size_w);

	mov	eax, DWORD PTR _shm_size_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shm_w_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _shm_r_ptr$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 59   : 
; 60   : 		*shm_r_ptr = SHM_R;

	mov	eax, DWORD PTR _shm_r_ptr$[ebp]
	mov	BYTE PTR [eax], 1

; 61   : 	}

	jmp	SHORT $LN2@shm_write
$LN1@shm_write:

; 62   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_shm_write@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 644  :     }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
